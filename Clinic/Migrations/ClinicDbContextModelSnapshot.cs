// <auto-generated />
using System;
using Clinic.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Clinic.Migrations
{
    [DbContext(typeof(ClinicDbContext))]
    partial class ClinicDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Clinic.Models.Categorie", b =>
                {
                    b.Property<int>("CategorieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategorieId"), 1L, 1);

                    b.Property<string>("CategorieName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategorieId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Clinic.Models.ChefDeService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ChefDeServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ChefsDeService");
                });

            modelBuilder.Entity("Clinic.Models.DailyEmployment", b =>
                {
                    b.Property<int>("DailyEmploymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DailyEmploymentId"), 1L, 1);

                    b.Property<DateTime>("Day")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("WeeklyEmploymentId")
                        .HasColumnType("int");

                    b.HasKey("DailyEmploymentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WeeklyEmploymentId");

                    b.ToTable("DailyEmployments");
                });

            modelBuilder.Entity("Clinic.Models.Day", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("EmploiId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmploiId");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("Clinic.Models.Emploi", b =>
                {
                    b.Property<int>("EmploiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmploiId"), 1L, 1);

                    b.Property<int?>("ChefDeServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DayCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HRId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmploiId");

                    b.HasIndex("ChefDeServiceId");

                    b.HasIndex("HRId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Emplois");
                });

            modelBuilder.Entity("Clinic.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategorieId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmploiId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsChefDeService")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PosteId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RecruitmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalWeeklyHours")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.HasIndex("CategorieId");

                    b.HasIndex("EmploiId");

                    b.HasIndex("PosteId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Clinic.Models.EmployeePoste", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("PosteId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "PosteId");

                    b.HasIndex("PosteId");

                    b.ToTable("EmployeePoste");
                });

            modelBuilder.Entity("Clinic.Models.EmployeeRepos", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("ReposId")
                        .HasColumnType("int");

                    b.Property<int?>("ReposId1")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "ReposId");

                    b.HasIndex("ReposId");

                    b.HasIndex("ReposId1");

                    b.ToTable("EmployeeRepos");
                });

            modelBuilder.Entity("Clinic.Models.EmployeeSupplement", b =>
                {
                    b.Property<int>("EmployeeSupplementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeSupplementId"), 1L, 1);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("SupplementId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeSupplementId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SupplementId");

                    b.ToTable("EmployeeSupplements");
                });

            modelBuilder.Entity("Clinic.Models.GestionViewModel", b =>
                {
                    b.Property<int>("CategorieId")
                        .HasColumnType("int");

                    b.Property<string>("NouveauPoste")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NouveauRepos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NouveauSupplement")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("GestionViewModels");
                });

            modelBuilder.Entity("Clinic.Models.HR", b =>
                {
                    b.Property<int>("HRId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HRId"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HRName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HRId");

                    b.ToTable("HR");
                });

            modelBuilder.Entity("Clinic.Models.Poste", b =>
                {
                    b.Property<int>("PosteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PosteId"), 1L, 1);

                    b.Property<bool>("Actif")
                        .HasColumnType("bit");

                    b.Property<bool>("ApresMidi")
                        .HasColumnType("bit");

                    b.Property<int>("CategorieId")
                        .HasColumnType("int");

                    b.Property<int?>("DailyEmploymentId")
                        .HasColumnType("int");

                    b.Property<int?>("EmploiId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("GardeSoir")
                        .HasColumnType("bit");

                    b.Property<bool>("Matin")
                        .HasColumnType("bit");

                    b.Property<int?>("PositionX")
                        .HasColumnType("int");

                    b.Property<int?>("PositionY")
                        .HasColumnType("int");

                    b.Property<string>("Postename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Seance1Debut")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("Seance1Fin")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("Seance2Debut")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("Seance2Fin")
                        .HasColumnType("time");

                    b.HasKey("PosteId");

                    b.HasIndex("CategorieId");

                    b.HasIndex("DailyEmploymentId");

                    b.HasIndex("EmploiId");

                    b.ToTable("Postes");
                });

            modelBuilder.Entity("Clinic.Models.Repos", b =>
                {
                    b.Property<int>("ReposId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReposId"), 1L, 1);

                    b.Property<int>("CategorieId")
                        .HasColumnType("int");

                    b.Property<int?>("DailyEmploymentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date_Jours")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date_Joursfin")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmploiId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("PositionX")
                        .HasColumnType("int");

                    b.Property<int?>("PositionY")
                        .HasColumnType("int");

                    b.Property<string>("ReposName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReposId");

                    b.HasIndex("CategorieId");

                    b.HasIndex("DailyEmploymentId");

                    b.HasIndex("EmploiId");

                    b.ToTable("Repos");
                });

            modelBuilder.Entity("Clinic.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"), 1L, 1);

                    b.Property<int?>("ChefDeServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("ChefDeServiceId1")
                        .HasColumnType("int");

                    b.Property<int?>("ChefServiceEmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("ChefServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HRId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceId");

                    b.HasIndex("ChefDeServiceId1");

                    b.HasIndex("ChefServiceEmployeeId");

                    b.HasIndex("HRId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Clinic.Models.Supplement", b =>
                {
                    b.Property<int>("SupplementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplementId"), 1L, 1);

                    b.Property<int?>("DailyEmploymentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmploiId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("EndHour")
                        .HasColumnType("time");

                    b.Property<string>("Matricule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PositionX")
                        .HasColumnType("int");

                    b.Property<int?>("PositionY")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("StartHour")
                        .HasColumnType("time");

                    b.HasKey("SupplementId");

                    b.HasIndex("DailyEmploymentId");

                    b.HasIndex("EmploiId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Supplements");
                });

            modelBuilder.Entity("Clinic.Models.WeeklyEmployment", b =>
                {
                    b.Property<int>("WeeklyEmploymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WeeklyEmploymentId"), 1L, 1);

                    b.Property<DateTime>("WeekEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WeekStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("WeeklyEmploymentId");

                    b.ToTable("WeeklyEmployments");
                });

            modelBuilder.Entity("Clinic.Models.ChefDeService", b =>
                {
                    b.HasOne("Clinic.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Clinic.Models.Service", "Service")
                        .WithMany("ChefsDeService")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Clinic.Models.DailyEmployment", b =>
                {
                    b.HasOne("Clinic.Models.Employee", "Employee")
                        .WithMany("DailyEmployments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.Models.WeeklyEmployment", null)
                        .WithMany("DailyEmployments")
                        .HasForeignKey("WeeklyEmploymentId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Clinic.Models.Day", b =>
                {
                    b.HasOne("Clinic.Models.Emploi", null)
                        .WithMany("Days")
                        .HasForeignKey("EmploiId");
                });

            modelBuilder.Entity("Clinic.Models.Emploi", b =>
                {
                    b.HasOne("Clinic.Models.ChefDeService", null)
                        .WithMany("Emplois")
                        .HasForeignKey("ChefDeServiceId");

                    b.HasOne("Clinic.Models.HR", null)
                        .WithMany("Emplois")
                        .HasForeignKey("HRId");

                    b.HasOne("Clinic.Models.Service", "Service")
                        .WithMany("Emplois")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Clinic.Models.Employee", b =>
                {
                    b.HasOne("Clinic.Models.Categorie", "Categorie")
                        .WithMany()
                        .HasForeignKey("CategorieId");

                    b.HasOne("Clinic.Models.Emploi", "Emploi")
                        .WithMany("Employees")
                        .HasForeignKey("EmploiId");

                    b.HasOne("Clinic.Models.Poste", null)
                        .WithMany("Employees")
                        .HasForeignKey("PosteId");

                    b.HasOne("Clinic.Models.Service", "Service")
                        .WithMany("Employees")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Categorie");

                    b.Navigation("Emploi");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Clinic.Models.EmployeePoste", b =>
                {
                    b.HasOne("Clinic.Models.Employee", "Employee")
                        .WithMany("EmployeePostes")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.Models.Poste", "Poste")
                        .WithMany("EmployeePostes")
                        .HasForeignKey("PosteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Poste");
                });

            modelBuilder.Entity("Clinic.Models.EmployeeRepos", b =>
                {
                    b.HasOne("Clinic.Models.Employee", "Employee")
                        .WithMany("EmployeeRepos")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.Models.Repos", "Repos")
                        .WithMany()
                        .HasForeignKey("ReposId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.Models.Repos", null)
                        .WithMany("Employee")
                        .HasForeignKey("ReposId1");

                    b.Navigation("Employee");

                    b.Navigation("Repos");
                });

            modelBuilder.Entity("Clinic.Models.EmployeeSupplement", b =>
                {
                    b.HasOne("Clinic.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.Models.Supplement", "Supplement")
                        .WithMany("EmployeeSupplement")
                        .HasForeignKey("SupplementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Supplement");
                });

            modelBuilder.Entity("Clinic.Models.Poste", b =>
                {
                    b.HasOne("Clinic.Models.Categorie", "Categorie")
                        .WithMany("Postes")
                        .HasForeignKey("CategorieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.Models.DailyEmployment", null)
                        .WithMany("Postes")
                        .HasForeignKey("DailyEmploymentId");

                    b.HasOne("Clinic.Models.Emploi", "Emploi")
                        .WithMany("Postes")
                        .HasForeignKey("EmploiId");

                    b.Navigation("Categorie");

                    b.Navigation("Emploi");
                });

            modelBuilder.Entity("Clinic.Models.Repos", b =>
                {
                    b.HasOne("Clinic.Models.Categorie", "Categorie")
                        .WithMany("Repos")
                        .HasForeignKey("CategorieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.Models.DailyEmployment", null)
                        .WithMany("Repos")
                        .HasForeignKey("DailyEmploymentId");

                    b.HasOne("Clinic.Models.Emploi", "Emploi")
                        .WithMany("Repos")
                        .HasForeignKey("EmploiId");

                    b.Navigation("Categorie");

                    b.Navigation("Emploi");
                });

            modelBuilder.Entity("Clinic.Models.Service", b =>
                {
                    b.HasOne("Clinic.Models.ChefDeService", "ChefDeService")
                        .WithMany()
                        .HasForeignKey("ChefDeServiceId1");

                    b.HasOne("Clinic.Models.Employee", "ChefService")
                        .WithMany()
                        .HasForeignKey("ChefServiceEmployeeId");

                    b.HasOne("Clinic.Models.HR", "HR")
                        .WithMany("Services")
                        .HasForeignKey("HRId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ChefDeService");

                    b.Navigation("ChefService");

                    b.Navigation("HR");
                });

            modelBuilder.Entity("Clinic.Models.Supplement", b =>
                {
                    b.HasOne("Clinic.Models.DailyEmployment", null)
                        .WithMany("Supplements")
                        .HasForeignKey("DailyEmploymentId");

                    b.HasOne("Clinic.Models.Emploi", "Emploi")
                        .WithMany("Supplements")
                        .HasForeignKey("EmploiId");

                    b.HasOne("Clinic.Models.Employee", "Employee")
                        .WithMany("Supplements")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Emploi");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Clinic.Models.Categorie", b =>
                {
                    b.Navigation("Postes");

                    b.Navigation("Repos");
                });

            modelBuilder.Entity("Clinic.Models.ChefDeService", b =>
                {
                    b.Navigation("Emplois");
                });

            modelBuilder.Entity("Clinic.Models.DailyEmployment", b =>
                {
                    b.Navigation("Postes");

                    b.Navigation("Repos");

                    b.Navigation("Supplements");
                });

            modelBuilder.Entity("Clinic.Models.Emploi", b =>
                {
                    b.Navigation("Days");

                    b.Navigation("Employees");

                    b.Navigation("Postes");

                    b.Navigation("Repos");

                    b.Navigation("Supplements");
                });

            modelBuilder.Entity("Clinic.Models.Employee", b =>
                {
                    b.Navigation("DailyEmployments");

                    b.Navigation("EmployeePostes");

                    b.Navigation("EmployeeRepos");

                    b.Navigation("Supplements");
                });

            modelBuilder.Entity("Clinic.Models.HR", b =>
                {
                    b.Navigation("Emplois");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Clinic.Models.Poste", b =>
                {
                    b.Navigation("EmployeePostes");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Clinic.Models.Repos", b =>
                {
                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Clinic.Models.Service", b =>
                {
                    b.Navigation("ChefsDeService");

                    b.Navigation("Emplois");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Clinic.Models.Supplement", b =>
                {
                    b.Navigation("EmployeeSupplement");
                });

            modelBuilder.Entity("Clinic.Models.WeeklyEmployment", b =>
                {
                    b.Navigation("DailyEmployments");
                });
#pragma warning restore 612, 618
        }
    }
}
